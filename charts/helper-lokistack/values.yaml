---

# -- Enable or disable LokiStack configuration
# @default -- false
enabled: true

# -- Name of the LokiStack object
name: logging-loki

# -- Namespace of the LokiStack object
namespace: openshift-logging

# -- Syncwave for the LokiStack object.
# @default -- 3
syncwave: 3

# -- This is for log streams only, not the retention of the object store. Data retention must be configured on the bucket.
global_retention_days: 4

# Setting for storage
storage:

  # -- Size defines one of the supported Loki deployment scale out sizes.
  # Can be either:
  #   - 1x.extra-small (Default)
  #   - 1x.small
  #   - 1x.medium
  # @default -- 1x.extra-small
  size: 1x.extra-small

  # Secret for object storage authentication. Name of a secret in the same namespace as the LokiStack custom resource.
  secret:

    # -- Name of a secret in the namespace configured for object storage secrets.
    name: logging-loki-s3-secret

    # Type of object storage that should be used
    # Can bei either:
    #  - swift
    #  - azure
    #  - s3 (default)
    #  - alibabacloud
    #  - gcs
    # -- Type of object storage that should be used
    # @default -- s3
    type: s3

  # Schemas for reading and writing logs.
  schemas:
     # -- Version for writing and reading logs.
     # Can be v11 or v12
     # @default -- v12
    - version: v12
      # -- EffectiveDate is the date in UTC that the schema will be applied on. To ensure readibility of logs, this date should be before the current date in UTC.
      # @default -- 2022-06-01
      effectiveDate: "2022-06-01"

# -- Storage class name defines the storage class for ingester/querier PVCs.
# @default -- gp3-csi
storageclassname: ocs-storagecluster-ceph-rbd

# -- Mode defines the mode in which lokistack-gateway component will be configured.
# Can be either: static (default), dynamic, openshift-logging, openshift-network
# @default -- static
mode: openshift-logging

# -- Control pod placement for LokiStack components. You can define a list of tolerations for the following components:
# compactor, distributer, gateway, indexGateway, ingester, querier, queryFrontend, ruler
podPlacements: {}

# podPlacements:
#  # Pod placement of compactor
#  compactor:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of distributor
#  distributor:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of gateway
#  gateway:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of indexGateway
#  indexGateway:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of ingester
#  ingester:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of querier
#  querier:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of queryFrontend
#  queryFrontend:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#  # Pod placement of ruler
#  ruler:
#    tolerations:
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
#      - effect: NoExecute
#        key: node-role.kubernetes.io/infra
#        operator: Equal
#        value: reserved
helper-objectstore:
  ######################################
  # Configures OpenShift Data Foundation
  # This will create a BackingStore, BucketClaim and BucketClass
  #
  # Documentation: https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10/html-single/managing_hybrid_and_multicloud_resources/index#creating-a-local-Persistent-Volume-backed-backingstore_rhodf
  ######################################

  # -- Enable objectstore configuration
  # @default -- false
  enabled: false

  # -- Syncwave for Argo CD
  # @default - 1
  syncwave: 1

  # -- Name of the BackingStore
  backingstore_name: backingstore

  # -- Size of the BackingStore that each volume shall have.
  backingstore_size: 700Gi

  # -- CPU Limit for the Noobaa Pod
  # @default -- 500m
  limits_cpu: 500m

  # -- Memory Limit for the Noobaa Pod.
  # @default -- 2Gi
  limits_memory: 2Gi

  pvPool:
    # -- Number of volumes that shall be used
    # @default -- 1
    numOfVolumes: 1

    # Type of BackingStore. Currently pv-pool is the only one supported by this Helm Chart.
    # @default -- pv-pool
    type: pv-pool

  # -- The StorageClass the BackingStore is based on
  baseStorageClass: gp3-csi

  # -- Name of the StorageClass that shall be created for the bucket.
  storageclass_name: bucket-storage-class

  # Bucket that shall be created
  bucket:
    # -- Shall a new bucket be enabled?
    # @default -- false
    enabled: true

    # -- Name of the bucket that shall be created
    name: logging-loki-s3

    # -- Target Namespace for that bucket.
    namespace: openshift-logging

    # -- Syncwave for bucketclaim creation. This should be done very early, but it depends on ODF.
    # @default -- 2
    syncwave: 2

    # -- Name of the storageclass for our bucket
    # @default -- openshift-storage.noobaa.io
    storageclass: openshift-storage.noobaa.io

helper-loki-bucket-secret:

  enabled: true

  # -- Syncwave for Argo CD.
  # @default -- 3
  syncwave: '0'

  # -- Namespace where LokiStack is deployed and where the Secret shall be created.
  namespace: openshift-logging

  # -- Name of Secret that shall be created.
  secretname: logging-loki-s3-secret

  # Bucket Configuration
  bucket:
    # -- Name of the Bucket shall has been created.
    name: logging-loki-s3
